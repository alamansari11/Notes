{
	"tldrawFileFormatVersion": 1,
	"schema": {
		"schemaVersion": 2,
		"sequences": {
			"com.tldraw.store": 4,
			"com.tldraw.asset": 1,
			"com.tldraw.camera": 1,
			"com.tldraw.document": 2,
			"com.tldraw.instance": 25,
			"com.tldraw.instance_page_state": 5,
			"com.tldraw.page": 1,
			"com.tldraw.instance_presence": 6,
			"com.tldraw.pointer": 1,
			"com.tldraw.shape": 4,
			"com.tldraw.asset.bookmark": 2,
			"com.tldraw.asset.image": 5,
			"com.tldraw.asset.video": 5,
			"com.tldraw.shape.group": 0,
			"com.tldraw.shape.text": 2,
			"com.tldraw.shape.bookmark": 2,
			"com.tldraw.shape.draw": 2,
			"com.tldraw.shape.geo": 9,
			"com.tldraw.shape.note": 8,
			"com.tldraw.shape.line": 5,
			"com.tldraw.shape.frame": 0,
			"com.tldraw.shape.arrow": 5,
			"com.tldraw.shape.highlight": 1,
			"com.tldraw.shape.embed": 4,
			"com.tldraw.shape.image": 4,
			"com.tldraw.shape.video": 2,
			"com.tldraw.binding.arrow": 0
		}
	},
	"records": [
		{
			"gridSize": 10,
			"name": "",
			"meta": {},
			"id": "document:document",
			"typeName": "document"
		},
		{
			"meta": {},
			"id": "page:page",
			"name": "Page 1",
			"index": "a1",
			"typeName": "page"
		},
		{
			"id": "pointer:pointer",
			"typeName": "pointer",
			"x": 591.3333435058594,
			"y": 2110.6666870117188,
			"lastActivityTimestamp": 1736187436331,
			"meta": {}
		},
		{
			"followingUserId": null,
			"opacityForNextShape": 1,
			"stylesForNextShape": {},
			"brush": null,
			"scribbles": [],
			"cursor": {
				"type": "default",
				"rotation": 0
			},
			"isFocusMode": false,
			"exportBackground": true,
			"isDebugMode": false,
			"isToolLocked": false,
			"screenBounds": {
				"x": 0,
				"y": 0,
				"w": 940,
				"h": 566
			},
			"insets": [
				false,
				false,
				true,
				false
			],
			"zoomBrush": null,
			"isGridMode": false,
			"isPenMode": false,
			"chatMessage": "",
			"isChatting": false,
			"highlightedUserIds": [],
			"isFocused": true,
			"devicePixelRatio": 1.5,
			"isCoarsePointer": false,
			"isHoveringCanvas": true,
			"openMenus": [],
			"isChangingStyle": false,
			"isReadonly": false,
			"meta": {},
			"duplicateProps": null,
			"id": "instance:instance",
			"currentPageId": "page:page",
			"typeName": "instance"
		},
		{
			"editingShapeId": "shape:N1jE-oVJR8bh0HSMITwVW",
			"croppingShapeId": null,
			"selectedShapeIds": [
				"shape:N1jE-oVJR8bh0HSMITwVW"
			],
			"hoveredShapeId": "shape:N1jE-oVJR8bh0HSMITwVW",
			"erasingShapeIds": [],
			"hintingShapeIds": [],
			"focusedGroupId": null,
			"meta": {},
			"id": "instance_page_state:page:page",
			"pageId": "page:page",
			"typeName": "instance_page_state"
		},
		{
			"x": -200,
			"y": -1800,
			"z": 1,
			"meta": {},
			"id": "camera:page:page",
			"typeName": "camera"
		},
		{
			"x": 255.3333740234375,
			"y": 106.46875381469727,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:N1jE-oVJR8bh0HSMITwVW",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 927.6979370117188,
				"text": "there can only be 2 majority n/3 elements\n\nsuppose  consider n = 8 \nnow \nn/3 = 8/3 = 2\nfor the element to be majority it should be greater than 1\nbut if we consider there are 3 majority\nthen 3 * 3  = 9 but we only have 8 elements hence \nthere can only be 2 majority elements\n\n\n\nN = 6, array[] = {11,33,33,11,33,11}\n\ncnt => 11 => 3\ncnt => 33 => 3\n\n6/3 = 2 since both count of 11 and 33 is above 2 hence\nthere are 2 majority elements\n\n\n\nBrute force\n\nvector<int> majorityElement(vector<int>& v) {\n        vector<int> result;\n        for (int i = 0; i < v.size(); i++) {\n            // if the element is already a majority  element than continue and\n            // dont repeat the process\n            if (result.size() == 0 || result[0] != v[i]) {\n                int cnt = 0;\n                for (int j = 0; j < v.size(); j++) {\n                    if (v[i] == v[j]) {\n                        cnt++;\n                    }\n                }\n                // check if the count is more than n/3\n                if (cnt > (v.size() / 3)) {\n                    result.push_back(v[i]);\n                }\n\n                // have to break if we got 2 majority elements\n                if (result.size() == 2)\n                    break;\n            }\n        }\n        return result;\n    }\n\n\n\nbetter:- using hash or map in c++\n\nunordered_map<int,int> um;\n\nfor(auto i: v)\n{\n  um[i]++;\n}\nvector<int> result;\nfor(auto i: um){\n  if(i.second > (v.size()/3)){\n  result.push_back(i.first);  \nif(result.size()==2) break;\n}\n\nreturn result;\n}\n",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a1",
			"typeName": "shape"
		}
	]
}